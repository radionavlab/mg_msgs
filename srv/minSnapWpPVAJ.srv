# This service is used to call minimum snap trajectories with fully constrained waypoints
# Note that there are no inequality constraints, though
# dt_flat_states if the sampling period required for the output flatStates
# dt_out is a vector with the time between every two waypoints (dt_out is not related to dt_flat_states)
# cost returns the integral of the two norm of snap throughout the trajectory
# Note: It is currently impossible to set non-zero velocity/acceleration/jerk constraints to 
# the first and last waypoint, these unfortunately are always zero 
# (TODO: adapt the code to accept non-zero initial and final vel/acc/jerk)
# traj_name is used for visualization purposes only
mg_msgs/PVAJ_request[] PVAJ_array
std_msgs/Float32 dt_flat_states
float32 max_vel
float32 max_acc
float32 max_jerk
string traj_name
---
mg_msgs/PVAJS_array flatStates
std_msgs/Float32[] dt_out
std_msgs/Float32 cost